/*  maxflowmodel.mod

    Maximum Flow Linear Programming Problem  */

/*  The Maximum Flow Problem in a network G = (V, E), where V is a set
    of nodes, E within V x V is a set of arcs, is to maximize the flow
    from one given node s (source) to another given node t (sink) subject
    to conservation of flow constraints at each node and flow capacities
    on each arc.  */

/*  Number of nodes  */
param n, integer, >= 2;

/*  Set of nodes  */
set V := {0..n};

/*  Set of arcs  */
set E, within V cross V;

/*  c[i, j] is capacity of arc between i and j  */
param c{(i, j) in E}, > 0;

/*  Source node  */
param s, symbolic, in V, default 0;

/*  Sink node  */
param t, symbolic, in V, default n;

/*  x[i, j] is the flow through arc (i, j)  */
var x{(i, j) in E}, >= 0, <= c[i, j];

/*  Total flow from source (s) to sink (t) */
var flow, >= 0;

/*  node[i] is conservation constraint for node i  */
s.t. node{i in V}:
/*  The summary flow into node i through all ingoing arcs
    must be equal to the summary flow from node i through all outgoing arcs  */
sum{(j,i) in E} x[j,i] + (if i = s then flow) = sum{(i,j) in E} x[i,j] + (if i = t then flow);

/*  The objective is to maximize the total flow through the network  */
maximize obj: flow;

solve;

printf{1..56} "="; printf "\n";
printf "Maximum flow from node %s to node %s is %g\n\n", s, t, flow;
printf "Starting node   Ending node   Arc capacity   Flow in arc\n";
printf "-------------   -----------   ------------   -----------\n";
printf{(i,j) in E: x[i,j] != 0}: "%13s   %11s   %12g   %11g\n", i, j,
   c[i,j], x[i,j];
printf{1..56} "="; printf "\n";

data;
