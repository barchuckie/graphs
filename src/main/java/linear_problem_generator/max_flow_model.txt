/*  maxflowmodel.mod

    Maximum Flow Linear Programming Problem  */

/*  The maximum flow problem in a graph G = (V, E), where V is a set of vertices
    and E = V x V is a set of edges, is to maximize the flow between the source (s)
    and the sink (t), subject to flow capacities at each edge and conservation
    of flow constraints at each vertex.  */

/*  Number of vertices  */
param n, integer, >= 2'

/*  Set of vertices  */
set V := {0..n};

/*  Set of edges  */
set E, within V cross V;

/*  c[i, j] is the capacity of edge between i and j  */
param c{(i, j) in E}, > 0;

/*  Source vertex  */
param s, symbolic, in V, default 0;

/*  Sink vertex  */
param t, symbolic, in V, default n;

/*  x[i, j] is the flow through edge (i, j)  */
var x{(i, j) in E}, >= 0, <= c[i, j];

/*  Total flow from source to sink  */
var flow, >= 0;

/*  conservation[i] is the conservation of flow constraints at vertex i  */
s.t. conservation{i in V}:
/*  The summary flow into vertex i through all ingoing edges
    must be equal to the summary flow from vertex i through all outgoing edges  */
sum{(j,i) in E} x[j,i] + (if i = s then flow) = sum{(i,j) in E} x[i,j] + (if i = t then flow);

/*  The objective is to maximize the total flow from source to sink  */
maximize obj: flow;

solve;

data;

